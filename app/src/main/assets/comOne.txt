I. Команды, работающие одинаково во всех процессорах. В эту группу входят команды, выполняющиеся процессорами старших моделей точно так же, как и процессором 8086. Они работают с теми же данными, не генерируют никаких особых ситуаций.
1. Команды двоично-десятичной арифметики:
       AAA: ASCII - коррекция после сложения;
       AAD: ASCII - коррекция перед делением;
       AAM: ASCII - коррекция после умножения;
       AAS: ASCII - коррекция после вычитания;
       DAA: десятичная коррекция после сложения;
       DAS: десятичная коррекция после вычитания.

2. Команды работы с регистром флагов:
       CLC: очистка флага переноса;
       CLD: очистка флага направления;
       CLI: очистка флага разрешения прерываний;
       CMC: инверсия флага переноса;
       STC: установка флага переноса;
       STD: установка флага направления;
       STI: установка флага разрешения прерываний;
       LAHF: чтение регистра флагов;
       SAHF: запись регистра флагов.

3. Команды повторений и организации циклов:
       LOOPcc: организация цикла;
       REPcc: повторение строковой операции.

4. Другие команды:
       CBW: преобразование байта в слово;
       CWD: преобразование слова в двойное слово;
       NOP: пустая операция;
       XLAT: табличное преобразование;
       HLT: останов. Эта команда в защищенном режиме может выполняться только на нулевом уровне привилегий.


II. Команды, получившие дополнительные возможности. В большинство команд процессора 80386 и выше, унаследованных от предыдущих процессоров были введены изменения и дополнения:
 - почти все команды могут оперировать 32-битными регистрами; 
 - большинство команд при обращении к памяти могут пользоваться всеми шестью сегментными регистрами, использовать в качестве базовых и индексных регистров любые регистры общего назначения, использовать масштабированное индексирование. Рассмотрим кратко все такие команды.
1. Команды арифметических и логических операций, пересылок и сдвигов. Новым для команд этой группы является возможность оперирования 32-битными операндами. Например, там где раньше использовался регистр AX, теперь может быть использован EAX, где операндом  являлось слово памяти, теперь можно использовать двойное слово и т.п. Отметим, что все старые возможности этих команд полностью сохранены. Перечислим все эти команды:
       ADC: сложение с переносом;
       ADD: сложение;
       SBB: вычитание с заемом;
       SUB: вычитание;
       DEC: декремент;
       INC: инкремент;
       СМР: сравнение;
       NEG: изменить знак;
       TEST: побитное сравнение;
       AND: логическое "И";
       OR: логическое "ИЛИ";
       XOR: логическое "Исключающее ИЛИ";
       NOT: логическое "НЕ";
       MOV: переслать данные;
       XCHG: обмен;
       RCL: циклический бит влево через флаг переноса;
       RCR: циклический бит вправо через флаг переноса;
       ROL: циклический сдвиг влево;
       ROR: циклический сдвиг вправо;
       SAL: арифметический сдвиг влево;
       SAR: арифметический сдвиг вправо;
       SHL: логический сдвиг влево;
       SHR: логический сдвиг вправо;
       DIV:  беззнаковое деление;
       IDIV: деление со знаком;
       MUL: беззнаковое умножение;
       LEA: загрузка эффективного адреса.

2. Строковые команды:
       CMPS: сравнение строк;
       LODS: загрузить строковый операнд;
       MOVS: пересылка строк;
       SCAS: сравнить строковый операнд;
       STOS: сохранить строковый операнд.
Все эти команды могут использовать 32-разрядную адресацию (в этом случае используются индексные регистры ESI и EDI) и пересылать 32-разрядные операнды. Мнемоники 32-разрядных вариантов этих команд выглядят следующим образом:
       CMPSD;
       LODSD;
       MOVSD;
       SCASD;
       STOSD.

3. Команды ввода-вывода:
       IN: ввод из порта байта, слова или двойного слова;
       OUT: вывод в порт байта, слова или двойного слова.
4. Команды условного перехода:
       Jcc: переход, если выполнено условие cc;
       JCXZ: переход, если CX = 0;
       JECXZ: переход, если ECX = 0.
Смещение в этих командах может быть 8-,16- и 32-битным числом. 

 5. Команды работы со стеком. Все имевшиеся ранее стековые команды теперь могут работать с непосредственными операндами, с 32-разрядными операндами (кроме того, в процессоре 80386 добавлены новые команды):
       PUSH: поместить операнд в стек;
       PUSHF: поместить в стек регистр FLAGS;
       PUSHFD: поместить в стек регистр EFLAGS;
       POP: извлечь операнд из стека;
       POPF: извлечь из стека регистр FLAGS;
       POPFD: извлечь из стека регистр EFLAGS;
       PUSHA: поместить все 16-разрядные регистры общего назначения в стек;
       PUSHAD: поместить все 32-разрядные регистры общего назначения в стек;
       POPA: извлечь все 16-разрядные регистры общего назначения из стека;
       POPAD: извлечь все 32-разрядные регистры общего назначения из стека.
Команды PUSHA и POPA появились впервые в процессоре  80286, а команды PUSHAD, POPAD, PUSFD и POPFD – в процессоре 80386.
Команда PUSHA помещает регистры в стек в следующем порядке: AX, CX, DX, BX, SP, BP, SI, DI, а команда POPA извлекает их в обратном порядке (но не извлекает регистр SP). Команды PUSHAD и POPAD точно также работают с регистрами EAX, ECX, EDX, EBX, ESP, EBP, ESI и EDI.

6. Команды загрузки полных указателей. В процессоре 8086 имелось две таких команды – LDS и LES. В микропроцессоре 80286 все осталось по-прежнему, а в 80386 произошли следующие изменения:
    – появились команды загрузки сегментных регистров  SS, FS и GS (LSS, LFS и LGS соответственно).
    – второй операнд любой из этих команд может быть как 16-, так и 32-разрядным регистром. Это значит, если атрибут размера операнда равен 32 битам, то из памяти читается 48-битный указатель (16 бит – в сегментный регистр и 32 бита – в регистр, указанный в команде).

7. Команда IMUL – знаковое умножение. Эта команда, кроме возможности работы с 32-разрядными данными, также может использоваться в следующих вариантах:
    IMUL <регистр>,<непосредственный операнд> – результат помещается в регистр;
    IMUL  <регистр-приемник>, <регистр-множитель>, <непосредственный операнд-множитель>.

8. Команды CALL и JMP – передача управления.


III. Новые команды процессоров 80286, 80386, 80486, Pentium. При описании особых ситуаций в некоторых командах использовано выражение "стандартные". К стандартным особым ситуациям здесь относится следующий набор:
– реальный режим: прерывание 13, если любая часть операнда  находится вне пространства эффективных адресов от 0 до 0FFFFh.
– защищенный режим: особая ситуация 13 (общая защита), если результат находится в сегменте, запрещенном для записи, или если недопустимый эффективный адрес в сегментах CS, DS, ES, FS или GS; особая ситуация 12 (ошибка стека), если недопустимый адрес в сегменте SS; особая ситуация 14 (страничная ошибка) при страничной ошибке.
– виртуальный режим: то же, что и в реальном режиме; особая ситуация 12 при страничной ошибке.
При описании команд использованы следующие обозначения:
– r8: один из регистров AL, CL, DL, BL, AH, CH, DH, BH;
– r16: один из регистров AX, CX, DX, BX, SP, BP, SI, DI;
– r32: один из регистров EAX, ECX, EDX, EBX, ESP, EBP, ESI, EDI;
– imm8, imm16, imm32: непосредственная одно-, двух- или четырехбайтная величина соответственно;
– r/m8, r/m16, r/m32, r/m64: одно-, двух-, четырех- или восьмибайтный регистр или операнд в памяти;
– m8, m16, m32: байт, слово или двойное слово в памяти.
1. Команда BOUND (80286) – проверка нахождения индекса массива в  заданных границах.
Синтаксис: BOUND  r16,m32
   BOUND  r32,m64
Действие: команда позволяет убедиться в том, что знаковый индекс массива находится в пределах заданных границ. Первый операнд содержит проверяемый индекс массива. Второй операнд адресует два слова (если атрибут размера операнда равен 16 бит) или два двойных слова (размер операнда 32 бита) памяти, первое из которых содержит нижнюю границу массива, а второе – верхнюю. Если в результате проверки выявится, что индекс массива не находится в пределах границ (включая сами границы), то будет сгенерирована особая ситуация 5, адрес возврата из которой указывает на команду BOUND. При удовлетворительном результате выполняется следующая команда.
Изменяемые флаги: нет. Особые ситуации: стандартные. Если в качестве второго операнда задан регистр, то генерируется особая ситуация 6 ("неопределенная операция").
Пример выполнения:
       Array16   dw      1111h,  3333h
       Array32   dd        55555555h,  88888888h
       MOV      AX,      2222h
       BOUND AX,      Dword Ptr Array16 ; нормально
       MOV      ECX,    33333333h
       BOUND ECX,     Qword Ptr Array32; особая ситуация 5.
       BOUND CX,        EBX ; особая ситуация 6.

2. Команды MOVZX и MOVSX – пересылка с расширением (80386).
Синтаксис :
        MOV*X  r16, r/m8
        MOV*X  r32, r/m8
        MOV*X  r32, r/m16
Действие: команды читают содержимое операнда-источника, который является байтом или словом, расширяют его до атрибута размера операнда (16 или 32 бита), и пересылают результат в операнд-приемник. Команды различаются только способом расширения операнда:
– MOVSX (MOVe with Sign eXtension) заполняет старшие биты знаковым битом источника;
– MOVZX (MOVe with Zero eXtension) заполняет старшие биты нулями.
Приемник (первый операнд) обязательно должен быть регистром общего назначения, а источник – операндом памяти или регистром.
Изменяемые флаги: нет. Особые ситуации: стандартные.
Пример выполнения:
       MOV    AL,      11h
       MOV    ECX,   12345678h
       MOVZX  ECX, AL        ; ECX:=00000011h
       MOV    BX,       0FF00h
       MOVSX  EDX,  BX        ; EDX:=FFFFFF00h

3. Команды установки байта при условии (80386).
Синтаксис: SETcc r/m8, где cc – любое из стандартных условий процессора (E, NE, C, NC и т.д.).
Действие: команда записывает в операнд значение 1, если проверяемое условие выполнено, в противном случае операнд обнуляется.
Изменяемые флаги: нет. Особые ситуации: стандартные.
Пример выполнения:
       MOV   AX,1
       DEC   AX
       SETZ  CL       ; CL := 1
       SETC  BH       ; BH := 0

4. Команды BSF и BSR (80386).
BSF (Bit Scan Forward) – сканирование битов вперед;
BSR (Bit Scan Reverse) – сканирование битов назад.
Синтаксис: BS*  r16,r/m16
   BS*  r32,r/m32
Действие: команды предназначены для поиска позиции первого единичного бита в слове или двойном слове. Второй операнд просматривается побитно начиная с младших (BSF) или старших (BSR) разрядов. Номер первого встреченного единичного бита помещается в операнд-приемник и очищается флаг ZF. Если все разряды операнда-источника нулевые, то устанавливается флаг ZF.
Изменяемые флаги: ZF. Особые ситуации: стандартные.
Пример выполнения:
       MOV BX,0101110001010000b   ;
       BSF  AX,BX    ; AX := 4
       BSR  CX,BX    ; CX := 14

5. Команды проверки и модификации бита.
BT  (Bit Test) – проверка бита;
BTC (Bit Test with Complement) – проверка и дополнение бита;
BTR (Bit Test with Reset) – проверка и сброс бита;
BTS (Bit Test with Set) – проверка и установка бита.
Синтаксис: BT*  r/m16, r16
   BT*  r/m32, r32
   BT*  r/m16, imm8
    BT*  r/m32, imm8
Действие: команды проверяют значение бита в первом операнде, номер которого задан вторым операндом, заносят это значение в флаг CF и, производят инвертирование (BTC), сброс (BTR) или установку (BTS) проверяемого бита. Значение смещения внутри операнда (регистра или ячейки памяти) задается непосредственным 8-разрядным числом или регистром и при выполнении команды берется по модулю 32, что позволяет выбрать любой из 32 разрядов операнда. Если операнд 16-разрядный, то смещение берется по модулю 16. При косвенной адресации ячеек памяти операция взятия по модулю не производится.
Изменяемые флаги: CF. Особые ситуации: стандартные.
Примеры:  BT   ESI, BX
        BTC  [DI], 15
        BTR  AX 2
        BTS  [EBX+EDI], DX

6. Команда CWDE – преобразовать слово в двойное слово (80386).
 Синтаксис: CWDE
Действие: команда преобразует слово в регистре AX в двойное слово в регистре EAX путем расширения  знакового бита регистра AX в два старших байта регистра EAX. Эта команда похожа на команду CWD, однако та использует пару регистров DX:AX в качестве приемника.
Изменяемые флаги: нет. Особые ситуации: нет.
Пример выполнения:
       MOV  EAX, 00008000h
       CWDE        ; EAX := FFFF8000h

7. Команда CDQ – преобразовать двойное слово в учетвереннное слово (80386).
Синтаксис: CDQ.
Действие: команда преобразует двойное слово в регистре EAX в учетверенное слово (квадрослово) в паре регистров EDX:EAX путем копирования знакового бита регистра EAX во все разряды EDX. Эта команда имеет тот же код операции, что и команда CWD (преобразующая слово в регистре AX в двойное слово в паре DX:AX). Какая из этих команд будет выполняться, определяется 16 или 32-битным сегментом или присутствием префикса размера операнда.
Изменяемые флаги: нет. Особые ситуации: нет.

8. Команды SHLD и SHRD – логический сдвиг двойной точности (80386).
Синтаксис: SH*D  r/m16, r16, imm8
   SH*D  r/m32, r32, imm8
   SH*D  r/m16, r16, CL
   SH*D  r/m32, r32, CL
Действие: SHLD (двойной сдвиг влево) сдвигает биты операнда-приемника (первый операнд) влево, заполняя пустые биты значениями битов, вытесняемых из операнда-источника. 
SHRD (двойной сдвиг вправо) сдвигает биты приемника вправо, заполняя пустые биты  значениями битов, вытесняемых из  операнда-источника.
Результат запоминается в приемнике, а операнд-источник не изменяется. Количество битов, на которое выполняется сдвиг, может быть задано в регистре CL или непосредственно значением байта в команде. Когда выполняется  сдвиг на ноль позиций, ни один из флагов не подвергается изменениям. В противном случае флагу CF присваивается значение последнего бита, вытесненного из операнда-приемника, и изменяются значения флагов SF, ZF и PF.
Особые ситуации: стандартные. 
Пример выполнения:
       MOV   AX, 1111111111111111b
       MOV   BX, 0101010100000000b
       SHLD  AX, BX, 4; AX := 1111111111110101b
       SHRD  AX, BX, 4; AX := 0000111111110101b

9. Команды INS и OUTS – ввод/вывод строк.
Синтаксис: INSB – прием байта из порта;
  INSW – прием слова из порта;
  INSD – прием двойного слова из порта;
  OUTSB – вывод байта в порт;
  OUTSW – вывод слова в порт;
  OUTSD – вывод двойного слова в порт.
Действие: номер порта всегда задается регистром DX. В командах INS* значение, считанное из порта, пересылается по адресу ES:(E)DI. В командах OUTS* в порт пересылается значение из переменной памяти, адресуемой парой DS:(E)SI. После выполнения команды содержимое индексного регистра (DI или SI) изменяется на 1 (INSB и OUTSB), 2 (INSW и OUTSW) или 4 (INSD и OUTSD). Если флаг DF=1 то индексный регистр уменьшается, в противном случае – увеличивается. Командам может предшествовать префикс REP, для ввода/вывода блока размером CX.
Изменяемые флаги: нет. Особые ситуации: стандартные, кроме того:
– защищенный режим: особая ситуация 13, если текущий уровень привилегий ниже, чем уровень привилегий ввода/вывода, и любой из соответствующих битов разрешения ввода/вывода в TSS равен 1.
– виртуальный режим: особая ситуация 13, если любой из соответствующих битов разрешения ввода/вывода в TSS равен 1.

10. Команда ENTER – создать кадр стека для параметров процедуры. Синтаксис: ENTER  imm16, imm8
Действие: команда создает кадр стека, используемый в большинстве блочно-структурированных языков высокого уровня при вызове процедур. Первый операнд определяет число байт, выделяемых в стеке для процедуры, в которую осуществляется вход. Второй операнд – лексический уровень вложенности (от 0 до 31) процедуры внутри исходного кода. Он определяет количество указателей кадра стека, которые будут скопированы в новый кадр из предыдущего. В регистре (E)BP сохраняется адрес первого двойного слова в индикаторе кадра. Это слово является указателем предыдущего стекового кадра. Формально команду ENTER STOR, LEVEL можно представить следующим алгоритмом:

PUSH (E)BP;
TEMP:= ESP;
While Level <> 0 Then
 Begin
   EBP:= EBP - 4;
   PUSH [EBP]
   Level:= Level - 1;
 End;
 If Level <>0 Then   PUSH TEMP;
 EBP:= TEMP;
 ESP:= ESP - STOR;

Переданные процедуре параметры адресуются с помощью положительных смещений относительно EBP, а локальные переменные – с помощью отрицательных.
Изменяемые флаги: нет. Особые ситуации:
– защищенный режим: особая ситуация 12, если ESP или EBP превысит предел стека в любой точке во время выполнения команды;
– реальный режим: нет;
– виртуальный режим: нет.
Пример: ENTER 1024, 1
11. Команда LEAVE - освободить кадр стека.
Синтаксис: LEAVE
Действие: команда производит действия, обратные команде ENTER. Она копирует указатель кадра в указатель стека, тем самым освобождая пространство, использовавшееся для локальных переменных. Старый указатель кадра выбирается из стека в регистр (E)BP, восстанавливая кадр вызывающей процедуры.
Изменяемые флаги: нет. Особые ситуации:
– защищенный режим: особая ситуация 12, если (E)BP не указывает на местоположение внутри текущего сегмента стека;
– реальный режим: прерывание 13, если любая часть операнда лежит вне пространства адресов от 0 до 0FFFFh;
– виртуальный режим: то же, что и в реальном режиме.

12. Команда BSWAP – перестановка байтов 32-битного регистра (80486).
Синтаксис: BSWAP r32
Действие: обращает порядок байтов в 32-битном регистре 
Изменяемые флаги: нет. Особые ситуации: стандартные.
Пример выполнения:
       MOV   EAX, 12345678h
       BSWAP  EAX; EAX = 78563412h

14. Команда XADD – обменять и сложить (80486).
Синтаксис: XADD r/m8, r8
  XADD r/m16, r16
  XADD r/m32, r32
Действие: команда выполняет сложение, помещает второй операнд в первый, а результат – во второй.
Изменяемые флаги: по результату сложения ZF, SF, CF, OF, PF, AF. Особые ситуации: стандартные.

15. Команда CMPXCH – сравнить и обменять (80486).
Синтаксис: CMPXCH r/m8, r8
  CMPXCH r/m16, r16
  CMPXCH r/m32, r32
Действие: команда сравнивает значения, содержащиеся в AL, AX, или EAX (в зависимости от размера операндов) с первым операндом. Если они равны, то второй операнд копируется в первый и флаг ZF устанавливается в 1, иначе первый операнд копируется в AL, AX или EAX, и флаг ZF устанавливается в 0.
Изменяемые флаги: ZF. Особые ситуации: стандартные.

16. Команда CMPXCH8B – сравнить и обменять 8 байт (Pentium).
Синтаксис: CMPXCH8B m64
Действие: команда сравнивает содержимое регистров EDX_EAX c памятью. Если они равны, то содержимое регистров ECX_EBX копируется в память, иначе память копируется в регистры EDX_EAX.
Изменяемые флаги: ZF. Особые ситуации: стандартные.

17. Команда CMOVcc – условная передача данных (Pentium Pro).
Синтаксис: CMOVcc r16, r/m16
  CMOVcc r32, r/m32, где cc – любое из стандартных условий процессора (E, NE, C, NC и т.д.).
Действие: команда копирует второй операнд в первый, если проверяемое условие выполнено; в противном случае ничего не выполняется.
Изменяемые флаги: нет. Особые ситуации: стандартные.

18. Команда CPUID – идентификация процессора (Pentium).
Синтаксис: CPUID.
Действие: команда сообщает информацию о производителе, типе, модификации и возможностях процессора (Pentium), внутренней кэш-памяти (Pentium Pro), уникальном номере процессора (Pentium III). Результат работы команды зависит от значения регистра EAX.
Изменяемые флаги: нет. Особые ситуации: стандартные.
Остальные новые команды относятся к защищенному режиму и рассмотрены в [9].