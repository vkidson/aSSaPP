Основные псевдокоманды ассемблера

Управление сегментированием и счетчиком команд
-------------------------------------

SEGMENT
 	Формат: имя-сег SEGMENT [тип-выравнивания] [использование][тип-объединения] ['имя_класса']
    ...
    имя-сег   ENDS
    Определяет границы сегмента программы

ASSUME
 
 	Формат: ASSUME.сег_регистр: имя_сег[,...]
    или ASSUME сег_регистр: NOTHING
    Сообщает ассемблеру, какой регистр сегмента связан с сегментом программы. Оператор ASSUME NOTHING отменяет действие всех предыдущих операторов ASSUME для данного регистра

ORG
 	Формат: ORG выражение
    Устанавливает счетчик адреса, равным значению выражения. Ассемблер присвоит этот адрес следующему объектному коду

EVEN
 	Формат: EVEN
    Cдвигает значение счетчика адреса к ближайшему четному байту

GROUP
 	Формат: имя-группы GROUP имя_сег[,...]
    Определяет список объектов, которые должны быть размещены в одном блоке памяти объемом 64 Кбайтов

LABEL
 	Формат: имя LABEL тип
    для любых ячеек памяти. Если указан тип BYTE, WORD и DWORD, то имя представляет собой переменную. Имя с типом NEAR или FAR представляет собой метку

Определение данных (переменных)
------------------------------------

DB
 	Формат: [имя] DВ выражение [,...]
    Определяет байты памяти

DW
 	Формат: [имя] DW выражение [,...]
    Определяет два байта памяти

DD
 	Формат: [имя] DD выражение [,...]
    Определяет четыре байта памяти

DQ
 	Формат: [имя] DQ выражение [,...]
    Определяет восемь байтов памяти

DT
 	Формат: [имя] DT выражение [,...]
    Определяет десять байтов памяти
    Определение символических имен

EQU
 	Формат: имя FQU выражение
    Постоянно присваивает значение выражения имени

=
 	Формат: имя = выражение
    Значение выражения присваивается имени, но может быть переприсвоено

Определение процедуры
----------------------------------

PROC
 	Формат: имя PROC [NEAR]
    или          имя PROC FAR
    ...
    RET
    имя ENDP
    Определяет процедуру

Связывание модулей
----------------------------------

PUBLIC
 	Формат: PUBLIC имя [,...]
    Объявляет имя доступным другим модулям программы, которые должны быть присоединены к данному модулю

EXTRN
 	Формат: EXTRN имя: тип [,...]
    Указывает, что имя определено в другом модуле программы

NAME
 	 Формат: NAME имя_модуля
    Присваивает внутреннее имя объектному модулю, генерируемому ассемблером

END
 	Формат: END [метка точки входа]
    Конец ассемблирования

Управление листингом
------------------------------

PAGE
 	Формат: PAGE [число строк][,число столбцов]
    Устанавливает длину и ширину печатаемой страницы. По умолчанию размер страницы 57 строк по 80 символов

TITLE
    SUBTITLE 	Формат: TITLE текст
    Формат: SUBTITLE текст
    Указывают заголовок и подзаголовок, которые должны быть напечатаны на второй и третьей строке страницы листинга соответственно. На верхней строке каждой страницы ассемблер печатает номер главы и номер страницы, разделяя их дефисом. Ассемблер увеличивает номер главы, если встретился оператор PAGE+, при этом нумерация страниц заново начинается с 1

XLIST
 	Формат: .XLIST
    Отменяет листинг программы вплоть до появления псевдокоманды .LIST

LIST
 	Формат: .LIST
    Возобновляет листинг программы

%OUT
 	Формат: %OUT ТЕКСТ
    Выдает сообщение ТЕКСТ во время трансляции

Псевдокоманды упрощенной сегментации
------------------------------------

.model	Формат: .model модель_памяти
    Определяет используемую в программе модель памяти

.stack	Формат: .stack [выражение]
    Начало сегмента стека с размером, задаваемым выражением (по умолчанию 1024 байта)

.data	Начало сегмента данных

.code	Начало сегмента кода

Псевдокоманды разрешения ассемблирования команд заданного процессора
-----------------------------------

.8086	Разрешает ассемблирование команд процессора 8086 и сопроцессора 8087 (по умолчанию)

.286	Разрешает ассемблирование непривилегированных команд процессора 80286 и сопроцессора 80287 (и ниже). Аналогично: .386, .486, .586, .686.

.286P	Разрешает ассемблирование всех команд процессора 80286 (включая защищенный режим) и сопроцессора 80287 (и ниже). Аналогично: .386Р, .486Р, .586Р, .686Р.

Примечание. Конструкция [ ] или [,…] обозначает,  что находящиеся в квадратных скобках аргументы или могут не появляться ни одного раза, или появиться произвольное число раз.


Операции ассемблера

Арифметические и логические
-----------------------------------

+ - Арифметическое сложение

- - Арифметическое вычитание

* - Арифметическое умножение

/ - Целочисленное деление

MOD - Остаток от целочисленного деления

AND - Логическое И

OR - Логическое ИЛИ

XOR - Логическое ИСКЛЮЧАЮЩЕЕ ИЛИ

NOT - Логическое НЕ

EQ	Сравнение на равенство

NE - Сравнение на не равенство

LT - Сравнение на меньше

GT - Сравнение на больше

LE - Сравнение на меньше или равно

GE - Сравнение на больше или равно

SHL
 	Формат: значение SHL выражение
    Сдвигает значение влево на число битов, равное выражению

SHR
 	Формат: значение SHR выражение
    Сдвигает значение вправо на число битов, равное выражению

HIGN
 	Формат: HIGH значение
    или HIGH выражение
    Выделяет старший байт 16-битного числового значения или выражения

LOW
 	Формат: LOW значение
    или LOW выражение
    Выделяет младший байт 16-битного числового значения или выражения

Определение компонент адресов и переменных
-------------------------------
$
 	Формат: $
    Определяет значение счетчика адреса текущей ячейки

SEG
 	Формат: SEG переменная
    или SEG метка
    Определяет сегментную компоненту адреса переменной или метки

OFFSET
 	Формат: OFFSET переменная
    или OFFSET метка
    Определяет смещение адреса переменной или метки

LENGTH
 	Формат: LENGTH переменная
    Определяет длину в единицах определения (байтах или словах) любой переменной, при определении которой был использован псевдооператор DUP

TYPE
 	Формат: TYPE переменная
    или TYPE метка
    Для переменной операция TYPE возвращает 1, если она имеет тип BYTE, 2 – WORD, 4 – DD,│ 8 – DQ, 10 – DT. Для меток она возвращает (атрибут NEAR), 2 – атрибут FAR.

SIZE
 	Формат: SIZE переменная
    Определяет произведение LENGTH×TYPE

DUP
 	Формат: n DUP (выражение [,…])
    Используется в  псевдокомандах определения данных для распределения и инициализации нескольких (n) единиц памяти

?
 	Формат: ?
    Используется в псевдокомандах определения данных для резервирования памяти без ее начальной инициализации

Присваивание атрибута
-----------------------------

PTR
 	Формат: тип PTR переменная
    или тип PTR метка
    или тип PTR адресное-выражение
    Изменяет атрибут типа (BYTE, WORD) или атрибут дистанции (NEAR, FAR) переменной, метки или адресного выражения

SHORT
 	Формат: SHORT адресное выражение
    SHORT метка
    Сообщает ассемблеру о том, что для представления значения выражения будет достаточно 1 байта

THIS
 	Формат: THIS атрибут_типа
    или THIS атрибут_дистанции
    Создает переменную или метку с заданным атрибутом, смещение и сегмент которых являются текущими значениями счетчика адреса

Тип выравнивания
-----------------------------

BYTE - Определяет границу, на которой должен быть размещен последующий логический сегмент при объединении сегментов
        Сегмент может начинаться по любому адресу

WORD - Сегмент должен начинаться с четного адреса

PARA - Сегмент должен начинаться с адреса, кратного 16.

PAGE - Сегмент должен начинаться с адреса, кратного 256.

INPAGE - Весь сегмент должен быть расположен в пределах страницы в 256 байт

Использование
----------------------------

USE16 - Определяет, что по умолчанию используется 16-битный размер операнда и адреса

USE32 - Определяет, что по умолчанию используется 32-битный размер операнда и адреса (начиная с процессора 80386 в защищенном режиме)

Тип объединения
----------------------------

PUBLIC - Определяет последовательное расположение сегментов кодов и/или данных модулей программы в памяти

STACK - Определяет последовательное расположение стековых сегментов модулей программы в памяти

COMMON - Определяет, что данный сегмент разделяет одинаковые ячейки памяти со всеми другими сегментами из других модулей, имеющими такие же имена

MEMORY - Аналогичен COMMON, но в памяти сегменты с данным типом объединения размещаются после всех других сегментов

Модель памяти
----------------------------

tiny - Определяет минимальную модель памяти (в программе используется общий сегмент кода, данных и стека)

small - Определяет малую модель памяти (в программе используются отдельные сегменты кода и данных)

medium - Определяет среднюю модель памяти (в программе используются несколько сегментов кода и сегмент данных)

compact - Определяет компактную модель памяти (в программе используются сегмент кода и несколько сегментов данных)

large - Определяет большую модель памяти (в программе используются несколько сегментов кода и несколько сегментов данных)

huge - Определяет максимальную модель памяти (в программе используются несколько сегментов кода и несколько сегментов данных)

flat - Определяет плоскую модель памяти (в программе используется общий сегмент кода, данных и стека при 32-битной адресации)


Макросредства ассемблера

Псевдокоманды общего назначения
-----------------------------

MACRO
 	 Формат: имя MACRO (список формальных параметров)
    ...
    ENDM
    Присваивает имя последовательности операторов языка ассемблера. Каждое определение MACRO должно завершаться псевдокомандой ENDM

LOCAL
 	Формат: LOCAL (список формальных параметров)
    Заставляет ассемблер создать уникальное имя для каждой метки из списка формальных параметров и подставить это имя при каждом вхождении метки в расширение макроопределения

Псевдокоманды повторения
----------------------------

IRP
 	Формат: IRP параметр,<список аргументов>
    ...
    ENDM
    Заставляет ассемблер повторять находящиеся между псевдокомандами IRP и ENDM операторы по одному разу для каждого аргумента списка. При каждом повторении производится подстановка очередного аргумента вместо каждого вхождения параметра в блок операторов

IPRC
    Формат: IPRC параметр, строка
    ...
    ENDM
    Заставляет ассемблер повторять находящиеся между псевдокомандами IRPC и ENDM операторы по одному разу для каждого символа строки. При каждом повторении производится подстановка очередного символа строки вместо каждого вхождения параметра в блок операторов

REPT
    Формат: REPT выражение
    ...
    ENDM
    Заставляет ассемблер повторять находящиеся между псевдокомандами REPT и ENDM операторы число раз, определяемое выражением

Условные псевдокоманды
---------------------------

EXITM
 	Формат: EXITM
    Завершает расширение макроопределения в зависимости от результата выполнения условной псевдокоманды

IF1
 	Формат: IF1 выражение
    ...
    ENDIF
    Выполняет, если ассемблер осуществляет первый проход. Обычно используется для включения  с помощью оператора INCLUDE файла с библиотекой макроопределения в исходную программу

IFB
 	Формат: IFB <аргумент>
    ...
    ENDIF
    Выполняется, если <аргумент> пуст. Угловые скобки обязательны.

IFNB
 	Формат: IFNB <аргумент>
    ...
    ENDIF
    Выполняется, если <аргумент> не пуст. Угловые скобки обязательны

Псевдокоманды управления листингом
----------------------------

.LALL
 	Формат: .LALL
    Вызывает выдачу полного листинга (включая комментарии) всех расширений макроопределений.

.SALL
 	Формат: .SALL
    Исключает текст макроопределений из листинга

.XALL
 	Формат: .XALL
    Вызывает печать только тех строк макроопределения, которые генерируют объектный код. Этот режим устанавливается по умолчанию


Операции в макроопределениях

&
 	Формат: текст&текст
    Вызывает конкатенацию (слияние) текста или имени

;;
 	Формат: ;; комментарий
    Исключает комментарий из листинга, даже если он выдается по команде .LHLL

!
 	Формат: !символ
    Используется в аргументе для указания ассемблеру, что символ надо использовать как литерал, а не как имя

%
    Формат: %имя
    Преобразует имя в число. При расширении макроопределения ассемблер подставляет число вместо имени
