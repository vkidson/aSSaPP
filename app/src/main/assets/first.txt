В приложении рассматривается программирование персонального компьютера на языке низкого уровня – языке ассемблера, несмотря на трудоемкость и меньшее удобство его использования. 
В каких случаях необходимо использование языка ассемблера?

Во-первых, для создания программ с максимальной производительностью, например, в сложных игровых программах, машинной графике и т.п.

Во-вторых, для написания интерфейсных программ, обеспечивающих взаимодействие между языками высокого уровня и некоторыми служебными процедурами операционной системы. 

В-третьих, для самостоятельной доработки готовых программ. 

Таким образом, изучение программирования персонального компьютера на языке ассемблера является необходимым элементом подготовки будущего специалиста  по вычислительной технике.


Разработка программы на языке ассемблера складывается из следующих этапов: 
	- постановка задачи, разработка алгоритма и текста программы; набор текста программы на ЭВМ с помощью редактора текстов(Notepad++);

	- трансляция программы – получение объектного файла с помощью программы ассемблера (TASM – Turbo Assembler);

	- получение загрузочного файла с помощью редактора связей (TLINK – Turbo Linker); 

	- отладка программы с помощью отладчика (TD – Turbo Debugger); 

	- исполнение программы и проверка результатов.


Рассмотрим пример разработки и отладки программы:

Программа состоит из трех логических сегментов: стека SSEG, данных DATA, кода CODE. Каждый сегмент начинается с псевдокоманды SEGMENT и заканчивается псевдокомандой ENDS, причем обе псевдокоманды для одного и того же сегмента имеют одинаковые имена. 

	--------------------------
	sseg segment stack 'stack'
     		dw 256 dup(?)
		db 3 DUP(?), 7
	sseg ends
	data segment; Сообщения пользователю
		message db 10, 13, 'Hello, World!', '$'
	data ends
	--------------------------

Сегмент стека содержит псевдокоманду DW с операндом 256 DUP (?), что означает зарезервировать для стека 256 слов памяти (по 2 байта на слово - 512 байт), но не инициализировать их. 
Также сегмент стека содержит псевдокоманду DB с операндом 3 DUP (?), 7, что означает зарезервировать для стека 3 байта (по 1 байту на слово) и инициализированный байт (7). Таким образом, для этого выражения в сегменте стека резервируется 4 байта. 

Сегмент данных включает в себя сообщения пользователю, выдаваемые в процессе выполнения программы. Коды 10 и 13 задают управляющие символы возврата каретки и перевода строки. Сообщения завершаются символом $ в соответствии с требованиями функции DOS, с помощью которой они выводятся.

Атрибуты переменной являются важными аспектами, которые определяют, как она будет использоваться. Каждая переменная в ассемблере имеет три основных атрибута: имя (идентификатор), значение (данные, которые она хранит) и адрес (расположение в памяти). Эти атрибуты необходимы для правильной работы программы, так как они определяют способы доступа и использования переменных в коде.


Сегмент кода начинается с псевдокоманды ASSUME, которая сообщает ассемблеру, что регистр CS будет содержать базовый адрес сегмента CODE, регистр DS – сегмента DATA, регистр SS – сегмента SSEG. Сегментный регистр ES в программе не используется, поэтому в псевдокоманде ASSUME не указывается, что по умолчанию соответствует значению NOTHING

	------------------------------
	code segment
	assume cs:code,ds:data,ss:sseg
	------------------------------

Сегментные регистры CS и SS, указатель стека SP загружает операционная система. Загрузка сегментных регистров DS и ES возлагается на программиста, поэтому в первых двух командах сегмента кода производится инициализация используемого регистра DS.


Так выглядит типичная программа, имеющая основную программу и вызываемые в ней подпрограммы. Последняя строка программы содержит псевдокоманду конца трансляции END с операндом START, указывающим первую исполняемую команду программы. 

	--------------------------
	sseg segment stack 'stack'
     		dw 256 dup(?)
	sseg ends
	data segment; Сообщения пользователю
		message db 10, 13, 'Hello, World!', '$'
	data ends
	code segment
		assume cs:code,ds:data,ss:sseg 
	start:
    		mov ax, seg message
    		mov ds, ax
    		mov ah, 09h
    		lea dx, message
    		int 21h
    		mov ax, 4C00h
    		int 21h
	code ends
	end start
	-------------------------


Физические и логические адреса — еще одна важная концепция понимания архитектуры компьютеров, особенно в контексте микропроцессоров 80х86. Логический адрес используется программой для обращения к памяти, а физический адрес — это адрес, с которым работает аппаратное обеспечение. 

Важно отметить, что логические адреса преобразуются в физические адреса с помощью механизмов управления памятью процессора. Такое разделение позволяет изолировать программное обеспечение от аппаратного обеспечения, что в свою очередь обеспечивает большую гибкость и безопасность.

При формировании физических адресов в процессоре участвуют регистры сегмента, такие как CS (Segment Code) и DS (Data Segment). Эти регистры определяют сегменты памяти, к которым доступа требует программа. Например, когда программа обращается к переменной, регистры сегмента действуют как указатели на участки в общей памяти. Использование сегментов помогает разделить код и данные, что улучшает организацию программы.

	-------------------------
	data segment               
    		myVariable db 42    ; Переменная данных
	data ends
	code segment              
		start:             

    		; Инициализация сегмента данных
    		mov ax, @data   ; Загрузим адрес сегмента данных в AX
    		mov ds, ax      ; Переместим в регистр DS

    		; Чтение переменной в регистр AL
    		mov al, myVariable ; Загрузим значение переменной в AL

    		; Завершение программы
    		mov ax, 4C00h   ; Функция завершения DOS
    		int 21h         ; Вызов DOS прерывания
	code ends
	end start        
	-------------------------


Ошибка в коде может иметь множество форм, и понимание таких ошибок полезно для отладки. В фрагменте кода ошибка может быть вызвана отсутствием объявления какой-либо переменной. Это затрудняет интерпретацию кода, поскольку процессор не имеет возможности определить, что это такое. 

Аналогичные проблемы могут возникнуть, когда переменные не инициализированы или когда происходит неправильный перенос данных из одной переменной в другую. Например, если переменная X объявлена, но не инициализирована, попытка перемещения её значения в другую переменную или регистр может привести к непредвиденным результатам.

	-------------------------
	mov ax,x
	-------------------------