В приложении рассматривается программирование персонального компьютера на языке низкого уровня – языке ассемблера, несмотря на трудоемкость и меньшее удобство его использования. 
В каких случаях необходимо использование языка ассемблера?
--------------
Во-первых, для создания программ с максимальной производительностью, например, в сложных игровых программах, машинной графике и т.п.
--------------
Во-вторых, для написания интерфейсных программ, обеспечивающих взаимодействие между языками высокого уровня и некоторыми служебными процедурами операционной системы. 
--------------
В-третьих, для самостоятельной доработки готовых программ. 
--------------
Таким образом, изучение программирования персонального компьютера на языке ассемблера является необходимым элементом подготовки  будущего специалиста  по вычислительной технике.

Разработка программы на языке ассемблера складывается из следующих этапов: 
	- постановка задачи, разработка алгоритма и текста программы; набор текста программы на ЭВМ с помощью редактора текстов;
	- трансляция программы – получение объектного файла с помощью программы ассемблера (TASM – Turbo Assembler);
	- получение загрузочного файла с помощью редактора связей (TLINK – Turbo Linker); 
	- отладка программы с помощью отладчика (TD – Turbo Debugger); 
	- исполнение программы и проверка результатов.


Рассмотрим пример разработки и отладки программы.
Программа состоит из трех логических сегментов: стека SSEG, данных DATA, кода CODE. Каждый сегмент начинается с псевдокоманды SEGMENT и заканчивается псевдокомандой ENDS, причем обе псевдокоманды для одного и того же сегмента имеют одинаковые имена. 
	--------------------------
	sseg segment stack 'stack'
     		dw 256 dup(?)
	sseg ends
	data segment; Сообщения пользователю
		msg1 db 10,13,'Программа сложения двух чисел'
     		     db 10,13,'Введите первое число: ','$'
		msg2 db 10,13,'Введите второе число: ','$'
		msg3 db 10,13,'Результат = ','$'
	data ends
	--------------------------

Сегмент стека содержит псевдокоманду DW с операндом 256 DUP (?), что означает зарезервировать для стека 256 слов памяти, но не инициализировать их. 
Сегмент данных включает в себя сообщения пользователю, выдаваемые в процессе выполнения программы. Коды 10 и 13 задают управляющие символы возврата каретки и перевода строки. Сообщения завершаются символом $ в соответствии с требованиями функции DOS, с помощью которой они выводятся.
Сегмент кода начинается с псевдокоманды ASSUME, которая сообщает ассемблеру, что регистр CS будет содержать базовый адрес сегмента CODE, , регистр DS – сегмента DATA, регистр SS – сегмента SSEG. Сегментный регистр ES в программе не используется, поэтому в псевдокоманде ASSUME не указывается, что по умолчанию соответствует значению NOTHING
	------------------------------
	code segment
	assume cs:code,ds:data,ss:sseg
	------------------------------
Сегментныe регистры CS и SS, указатель стека SP загружает операционная система. Загрузка сегментных регистров DS и ES возлагается на программиста, поэтому в первых двух командах сегмента кода производится инициализация используемого регистра DS.


Далее следует собственно программа, соответствующая заданию. Она оформлена в виде основной программы и вызываемых в ней подпрограмм. Последняя строка программы содержит псевдокоманду конца трансляции END с операндом START, указывающим первую исполняемую команду программы. 
	--------------------------
	sseg segment stack 'stack'
     		dw 256 dup(?)
	sseg ends
	data segment; Сообщения пользователю
		message db 'Hello, World!', '$'data ends
	code segment
		assume cs:code,ds:data,ss:sseg 
	start:
    		mov ax, seg message
    		mov ds, ax
    		mov ah, 09h
    		lea dx, message
    		int 21h
    		mov ax, 4C00h
    		int 21h
	code ends
	end start
	-------------------------


